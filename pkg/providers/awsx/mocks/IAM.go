// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	iam "github.com/aws/aws-sdk-go/service/iam"
	mock "github.com/stretchr/testify/mock"
)

// IAM is an autogenerated mock type for the IAM type
type IAM struct {
	mock.Mock
}

// AttachRolePolicy provides a mock function with given fields: _a0
func (_m *IAM) AttachRolePolicy(_a0 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AttachRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.AttachRolePolicyInput) *iam.AttachRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachRolePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.AttachRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRole provides a mock function with given fields: _a0
func (_m *IAM) CreateRole(_a0 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateRoleInput) *iam.CreateRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.CreateRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRole provides a mock function with given fields: _a0
func (_m *IAM) DeleteRole(_a0 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRoleInput) *iam.DeleteRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.DeleteRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRolePermissionsBoundary provides a mock function with given fields: input
func (_m *IAM) DeleteRolePermissionsBoundary(input *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	ret := _m.Called(input)

	var r0 *iam.DeleteRolePermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePermissionsBoundaryInput) *iam.DeleteRolePermissionsBoundaryOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePermissionsBoundaryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePermissionsBoundaryInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRolePolicy provides a mock function with given fields: _a0
func (_m *IAM) DeleteRolePolicy(_a0 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePolicyInput) *iam.DeleteRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachRolePolicy provides a mock function with given fields: _a0
func (_m *IAM) DetachRolePolicy(_a0 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DetachRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DetachRolePolicyInput) *iam.DetachRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachRolePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.DetachRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: _a0
func (_m *IAM) GetRole(_a0 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) *iam.GetRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.GetRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttachedRolePoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *IAM) ListAttachedRolePoliciesPages(_a0 *iam.ListAttachedRolePoliciesInput, _a1 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRolePoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *IAM) ListRolePoliciesPages(_a0 *iam.ListRolePoliciesInput, _a1 func(*iam.ListRolePoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutRolePermissionsBoundary provides a mock function with given fields: input
func (_m *IAM) PutRolePermissionsBoundary(input *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	ret := _m.Called(input)

	var r0 *iam.PutRolePermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.PutRolePermissionsBoundaryInput) *iam.PutRolePermissionsBoundaryOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePermissionsBoundaryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.PutRolePermissionsBoundaryInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRolePolicy provides a mock function with given fields: _a0
func (_m *IAM) PutRolePolicy(_a0 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.PutRolePolicyInput) *iam.PutRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.PutRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagRole provides a mock function with given fields: input
func (_m *IAM) TagRole(input *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	ret := _m.Called(input)

	var r0 *iam.TagRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.TagRoleInput) *iam.TagRoleOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.TagRoleInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAssumeRolePolicy provides a mock function with given fields: _a0
func (_m *IAM) UpdateAssumeRolePolicy(_a0 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateAssumeRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateAssumeRolePolicyInput) *iam.UpdateAssumeRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAssumeRolePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.UpdateAssumeRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: _a0
func (_m *IAM) UpdateRole(_a0 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleInput) *iam.UpdateRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoleDescription provides a mock function with given fields: _a0
func (_m *IAM) UpdateRoleDescription(_a0 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateRoleDescriptionOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleDescriptionInput) *iam.UpdateRoleDescriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleDescriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleDescriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAM interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAM creates a new instance of IAM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAM(t mockConstructorTestingTNewIAM) *IAM {
	mock := &IAM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
