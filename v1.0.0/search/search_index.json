{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Identity Manager Operator is a Kubernetes Operator that automates the creation and management of pod identities. What problem does Identity Manager Operator solve? When an application running in a Pod needs to connect to a Cloud Service (such as Amazon SQS, Azure Event Hub, Google BigQuery Storage API), it needs API credentials. These API credentials need to be short-lived and fine grained so that a Pod gets only the required permissions. In each cloud provider, this is solved differently: Amazon EKS: IAM Roles for Service Accounts Google GKE: Workload Identity Azure AKS: Azure Workload Identity Kubernetes administrators have to deal with the following: Creating fine grained Roles & Policies as per application needs Creating and managing Kubernetes Service Accounts that provides identities to Pods by mapping to specific Roles & Policies Performing the above activities manually doesn't scale for large environments that comprises of many applications. Applications also evolve rapidly requiring dynamic modification of Service Accounts to provide access to more cloud services. Identity Manager Operator automates the entire lifecycle of creating and managing pod identities. It takes care of the following: Dynamically creating fine grained IAM Roles & Policies as requested Provisioning Kubernetes Service Accounts Attaching the Kubernetes Service Accounts to Pods","title":"Introduction"},{"location":"#introduction","text":"Identity Manager Operator is a Kubernetes Operator that automates the creation and management of pod identities.","title":"Introduction"},{"location":"#what-problem-does-identity-manager-operator-solve","text":"When an application running in a Pod needs to connect to a Cloud Service (such as Amazon SQS, Azure Event Hub, Google BigQuery Storage API), it needs API credentials. These API credentials need to be short-lived and fine grained so that a Pod gets only the required permissions. In each cloud provider, this is solved differently: Amazon EKS: IAM Roles for Service Accounts Google GKE: Workload Identity Azure AKS: Azure Workload Identity Kubernetes administrators have to deal with the following: Creating fine grained Roles & Policies as per application needs Creating and managing Kubernetes Service Accounts that provides identities to Pods by mapping to specific Roles & Policies Performing the above activities manually doesn't scale for large environments that comprises of many applications. Applications also evolve rapidly requiring dynamic modification of Service Accounts to provide access to more cloud services. Identity Manager Operator automates the entire lifecycle of creating and managing pod identities. It takes care of the following: Dynamically creating fine grained IAM Roles & Policies as requested Provisioning Kubernetes Service Accounts Attaching the Kubernetes Service Accounts to Pods","title":"What problem does Identity Manager Operator solve?"},{"location":"api-overview/","text":"Overview Architecture The Identity Manager Operator extends Kubernetes with Custom Resources to provide necessary Service Accounts along with required IAM Roles & Policies for pods to connect with Cloud APIs. The controller creates the defined policies in the cloud and maps them to the defined service account. If the desired state is changed, the controller will reconcile the state in the cluster and in the cloud. The supported cloud platforms are AWS and Azure. WorkloadIdentity The WorkloadIdentity resource defines the cloud provider, and the cloud provider's spec. The cloud provider defines the cloud platform for which the policies have to be created. Currently supported cloud providers are AWS and Azure. The Role policies define the policies that the pods require to access to appropriate cloud APIs. The service account defines the service account which is mapped to the defined policies. The WorkloadIdentity resource is namespaced. The working of Identity Manager is possible with an AWS's feature called IRSA. IRSA - IAM Roles for Service Accounts IRSA works by associating an IAM role to a service account. This service account can then provide AWS permissions to the containers in any pod that uses that service account. With this feature, there is no need to extend the IAM permissions to the EKS node's IAM role. With IRSA, the pods are made the first class citizens in IAM. Instead of intercepting the requests to the EC2 metadata API to perform a call to the STS API to retrieve temporary credentials, the changes are made in the AWS identity APIs to recognize Kubernetes pods. By combining an OpenID Connect (OIDC) identity provider and Kubernetes service account annotations, the users can use the IAM roles at the pod level. For more information, refer AWS IRSA Behavior This section defines the behavior of the Identity Manager in AWS EKS cluster for the following sample workload identity. apiVersion : identity-manager.io/v1alpha1 kind : WorkloadIdentity metadata : namespace : demo name : demo-identity spec : credentials : source : Secret secretRef : name : aws-credentials namespace : demo properties : region : us-east-1 aws : assumeRolePolicy : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::454135189203:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E7EC1A120425308D0853F923A\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E7EC1A120425308D0853F923A:sub\": \"system:serviceaccount:demo:sa-demo\" } } } ] } inlinePolicies : ec2-describe-0 : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:Describe*\" ], \"Resource\": [ \"*\" ] } ] } maxSessionDuration : 3600 path : / pods : - matchLabels : app.kubernetes.io/name : demo-identity app.kubernetes.io/version : v1 serviceAccounts : - action : Create name : sa-demo namespace : demo description : 'identity for demoworkload' name : demo-identity provider : AWS On applying the above workload identity, Identity Manager Operator reconciles the workload identity in the following manner: The Identity Manager identifies the cloud provider using spec.provider . This also tells the Identity Manager to read the AWS specific spec at spec.aws . The Identity Manager uses specified credentials in spec.credentials to instantiate the cloud provider's API client if the cluster is a non EKS cluster. The Identity Manager creates an IAM role with the name demo-identity , in the path mentioned in spec.aws.path attaches the policies defined in spec.aws.inlinePolicies , applies the trust policy specified in spec.aws.assumeRolePolicy to the IAM role. The created IAM role will have the session duration mentioned in spec.aws.maxSessionDuration . It is the user's responsibility to populate the OIDC provider, namespace and the service account to which the IAM role will be annotated in spec.aws.assumeRolePolicy . The Identity Manager creates or updates the service account depending on the service account action specified in the spec.aws.serviceAccounts.action . The service account creates a new annotation with the newly created IAM role in the service account if the spec.aws.serviceAccounts.action is Create . If spec.aws.serviceAccounts.action is Update , the Identity Manager will update the service account's annotation if necessary. The following shows the example annotation of a service account: annotations: eks.amazonaws.com/role-arn: arn:aws:iam::123248189203:role/demo-identity Identity manager will use pods.matchLables to verify whether the role is assigned to a pod and it will restart the pods if it is not assigned. The roles and policies and deleted if the workload identity is deleted. Access Control The Identity Manager Operator runs as a deployment in your cluster with elevated privileges. It will read secrets in all namespaces. Ensure that the credentials you provide give Identity Manager the least privilege necessary.","title":"Overview"},{"location":"api-overview/#overview","text":"","title":"Overview"},{"location":"api-overview/#architecture","text":"The Identity Manager Operator extends Kubernetes with Custom Resources to provide necessary Service Accounts along with required IAM Roles & Policies for pods to connect with Cloud APIs. The controller creates the defined policies in the cloud and maps them to the defined service account. If the desired state is changed, the controller will reconcile the state in the cluster and in the cloud. The supported cloud platforms are AWS and Azure.","title":"Architecture"},{"location":"api-overview/#workloadidentity","text":"The WorkloadIdentity resource defines the cloud provider, and the cloud provider's spec. The cloud provider defines the cloud platform for which the policies have to be created. Currently supported cloud providers are AWS and Azure. The Role policies define the policies that the pods require to access to appropriate cloud APIs. The service account defines the service account which is mapped to the defined policies. The WorkloadIdentity resource is namespaced. The working of Identity Manager is possible with an AWS's feature called IRSA.","title":"WorkloadIdentity"},{"location":"api-overview/#irsa-iam-roles-for-service-accounts","text":"IRSA works by associating an IAM role to a service account. This service account can then provide AWS permissions to the containers in any pod that uses that service account. With this feature, there is no need to extend the IAM permissions to the EKS node's IAM role. With IRSA, the pods are made the first class citizens in IAM. Instead of intercepting the requests to the EC2 metadata API to perform a call to the STS API to retrieve temporary credentials, the changes are made in the AWS identity APIs to recognize Kubernetes pods. By combining an OpenID Connect (OIDC) identity provider and Kubernetes service account annotations, the users can use the IAM roles at the pod level. For more information, refer AWS IRSA","title":"IRSA - IAM Roles for Service Accounts"},{"location":"api-overview/#behavior","text":"This section defines the behavior of the Identity Manager in AWS EKS cluster for the following sample workload identity. apiVersion : identity-manager.io/v1alpha1 kind : WorkloadIdentity metadata : namespace : demo name : demo-identity spec : credentials : source : Secret secretRef : name : aws-credentials namespace : demo properties : region : us-east-1 aws : assumeRolePolicy : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::454135189203:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E7EC1A120425308D0853F923A\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E7EC1A120425308D0853F923A:sub\": \"system:serviceaccount:demo:sa-demo\" } } } ] } inlinePolicies : ec2-describe-0 : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:Describe*\" ], \"Resource\": [ \"*\" ] } ] } maxSessionDuration : 3600 path : / pods : - matchLabels : app.kubernetes.io/name : demo-identity app.kubernetes.io/version : v1 serviceAccounts : - action : Create name : sa-demo namespace : demo description : 'identity for demoworkload' name : demo-identity provider : AWS On applying the above workload identity, Identity Manager Operator reconciles the workload identity in the following manner: The Identity Manager identifies the cloud provider using spec.provider . This also tells the Identity Manager to read the AWS specific spec at spec.aws . The Identity Manager uses specified credentials in spec.credentials to instantiate the cloud provider's API client if the cluster is a non EKS cluster. The Identity Manager creates an IAM role with the name demo-identity , in the path mentioned in spec.aws.path attaches the policies defined in spec.aws.inlinePolicies , applies the trust policy specified in spec.aws.assumeRolePolicy to the IAM role. The created IAM role will have the session duration mentioned in spec.aws.maxSessionDuration . It is the user's responsibility to populate the OIDC provider, namespace and the service account to which the IAM role will be annotated in spec.aws.assumeRolePolicy . The Identity Manager creates or updates the service account depending on the service account action specified in the spec.aws.serviceAccounts.action . The service account creates a new annotation with the newly created IAM role in the service account if the spec.aws.serviceAccounts.action is Create . If spec.aws.serviceAccounts.action is Update , the Identity Manager will update the service account's annotation if necessary. The following shows the example annotation of a service account: annotations: eks.amazonaws.com/role-arn: arn:aws:iam::123248189203:role/demo-identity Identity manager will use pods.matchLables to verify whether the role is assigned to a pod and it will restart the pods if it is not assigned. The roles and policies and deleted if the workload identity is deleted.","title":"Behavior"},{"location":"api-overview/#access-control","text":"The Identity Manager Operator runs as a deployment in your cluster with elevated privileges. It will read secrets in all namespaces. Ensure that the credentials you provide give Identity Manager the least privilege necessary.","title":"Access Control"},{"location":"api-workloadidentity/","text":"Packages: identity-manager.io/v1alpha1 identity-manager.io/v1alpha1 Package v1alpha1 contains resources for identity-manager Resource Types: AwsRoleSpecPod AwsRoleSpecPod defines the AWS\u2019s role spec pod Field Description LabelSelector Kubernetes meta/v1.LabelSelector (Members of LabelSelector are embedded into this type.) namespace string (Optional) Namespace of the Pod AzureIdentity ( Appears on: WorkloadIdentityAzure ) AzureIdentity is the definition of Azure\u2019s Identity Field Description apiVersion string (Optional) APIVersion of the identity kind string (Optional) Kind of the identity metadata Metadata (Optional) Metadata of the identity spec AzureIdentitySpec (Optional) Spec of the identity AzureIdentityBinding ( Appears on: WorkloadIdentityAzure ) AzureIdentityBinding is the definition of Azure Identity Binding Field Description apiVersion string (Optional) APIVersion of the IdentityBinding kind string (Optional) Kind of the IdentityBinding metadata Metadata (Optional) Metadata of the IdentityBinding spec AzureIdentityBindingSpec (Optional) Spec of the IdentityBinding AzureIdentityBindingSpec ( Appears on: AzureIdentityBinding ) AzureIdentityBindingSpec defines the spec of the Identity Binding Field Description selector string (Optional) Selector of the IdentityBinding AzureIdentitySpec ( Appears on: AzureIdentity ) AzureIdentitySpec defines the spec of the Identity Field Description type int (Optional) Type of the identity Condition ( Appears on: ConditionedStatus ) A Condition that may apply to a resource. Field Description type ConditionType Type of this condition. At most one of each condition type may apply to a resource at any point in time. status Kubernetes core/v1.ConditionStatus Status of this condition; is it currently True, False, or Unknown? lastTransitionTime Kubernetes meta/v1.Time LastTransitionTime is the last time this condition transitioned from one status to another. reason ConditionReason A Reason for this condition\u2019s last transition from one status to another. message string (Optional) A Message containing details about this condition\u2019s last transition from one status to another, if any. ConditionReason ( string alias) ( Appears on: Condition ) A ConditionReason represents the reason a resource is in a condition. Value Description \"Available\" \"Creating\" \"Deleting\" \"ReconcileError\" \"ReconcileSuccess\" \"Unavailable\" ConditionType ( string alias) ( Appears on: Condition ) A ConditionType represents a condition a resource could be in. Value Description \"Ready\" TypeReady resources are believed to be ready to handle work. \"Synced\" TypeSynced resources are believed to be in sync with the Kubernetes resources that manage their lifecycle. ConditionedStatus ( Appears on: WorkloadIdentityStatus ) A ConditionedStatus reflects the observed status of a resource. Only one condition of each type may exist. Field Description conditions []Condition (Optional) Conditions of the resource. Credentials ( Appears on: WorkloadIdentitySpec ) Credentials defines the credentials of the cloud provider Field Description source CredentialsSource (Optional) Source of the credentials secretRef SecretRef (Optional) SecretRef to fetch the credentials properties map[string]string (Optional) Properties indicates extra properties of credentials CredentialsSource ( string alias) ( Appears on: Credentials ) A CredentialsSource is a source from which provider credentials may be acquired. Value Description \"Secret\" CredentialsSourceSecret indicates that a provider should acquire credentials from a secret. ExternalResource ( Appears on: WorkloadIdentityStatus ) ExternalResource is the external resource\u2019s definition Field Description id string (Optional) ID of the external resource type string (Optional) Type of the external resource Metadata ( Appears on: AzureIdentity , AzureIdentityBinding ) Metadata defines kubernetes resource\u2019s metadata Field Description name string (Optional) Name of the Resource namespace string (Optional) Namespace of the Resource labels map[string]string (Optional) Labels of the Resource annotations map[string]string (Optional) Annotations of the Resource Provider ( string alias) ( Appears on: WorkloadIdentitySpec ) Provider defines the cloud provider of the WorkloadIdentity Value Description \"AWS\" ProviderAWS is the AWS provider. \"Azure\" ProviderAzure is the Azure provider. Resource ( Appears on: WorkloadIdentityStatus ) Resource is the definition of the kubernetes resource Field Description apiVersion string (Optional) APIVersion of the resource kind string (Optional) Kind of the resource name string (Optional) Name of the resource namespace string (Optional) Namespace of the resource RoleAssignment ( Appears on: WorkloadIdentityAzure ) RoleAssignment defines the role assignment Field Description role string Role of the role assignment scope string (Optional) Scope of the role assignment RoleDefinition RoleDefinition is the definition for a Role Field Description id string ID of the role definition (this will be used to generate internal UUID for role) roleName string RoleName of the role definition roleType string RoleType of the role definition description string (Optional) Description of the role definition assignableScopes []string (Optional) AssignableScopes is a list of assignable scopes permissions []RolePermission Permissions of the role definition RolePermission ( Appears on: RoleDefinition ) RolePermission defines the permissions of a Role Field Description actions []string (Optional) Actions is a list of actions notActions []string (Optional) NotActions is a list of not actions dataActions []string (Optional) DataActions is a list of data actions notDataActions []string (Optional) NotDataActions is a list of not data actions SecretRef ( Appears on: Credentials ) SecretRef defines the reference to the secret Field Description namespace string (Optional) Namespace of the secret. name string Name of the secret. ServiceAccount ServiceAccount defines the service account\u2019s metadata Field Description action ServiceAccountAction Action to be perform on ServiceAccount name string (Optional) Name of the ServiceAccount namespace string (Optional) Namespace of the ServiceAccount Annotations map[string]string (Optional) Annotations to be added on ServiceAccount ServiceAccountAction ( string alias) ( Appears on: ServiceAccount ) A ServiceAccountAction indicates action to be perform on ServiceAccount Value Description \"Create\" ServiceAccountActionCreate indicates create service account \"\" ServiceAccountActionDefault indicates no action \"Update\" ServiceAccountActionUpdate indicates updating service account WorkloadIdentity WorkloadIdentity is the Schema for the workloadidentities API Field Description metadata Kubernetes meta/v1.ObjectMeta Refer to the Kubernetes API documentation for the fields of the metadata field. spec WorkloadIdentitySpec name string (Optional) Name of the WorkloadIdentity description string (Optional) Desc of the WorkloadIdentity credentials Credentials (Optional) Credentials to manage the WorkloadIdentity provider Provider Provider of the WorkloadIdentity aws WorkloadIdentityAWS (Optional) AWS WorkloadIdentity azure WorkloadIdentityAzure (Optional) Azure WorkloadIdentity writeToSecretRef WriteToSecretRef (Optional) WriteToSecretRef is a reference to a secret status WorkloadIdentityStatus WorkloadIdentityAWS ( Appears on: WorkloadIdentitySpec ) WorkloadIdentityAWS defines the spec for AWS Provider Field Description path string (Optional) Path of the Role maxSessionDuration int64 (Optional) MaxSessionDuration of the Role assumeRolePolicy string AssumeRolePolicy of the Role inlinePolicies map[string]string (Optional) InlinePolicies of the Role policies []string (Optional) Policies of the Role serviceAccounts []*github.com/invisibl-cloud/identity-manager/api/v1alpha1.ServiceAccount (Optional) ServiceAccounts to be managed pods []*github.com/invisibl-cloud/identity-manager/api/v1alpha1.AwsRoleSpecPod (Optional) Pods to be managed WorkloadIdentityAzure ( Appears on: WorkloadIdentitySpec ) WorkloadIdentityAzure is the Provider spec for ProviderAzure Field Description roleDefinitions []*github.com/invisibl-cloud/identity-manager/api/v1alpha1.RoleDefinition (Optional) RoleDefinitions is a list of role definitions roleAssignments map[string]github.com/invisibl-cloud/identity-manager/api/v1alpha1.RoleAssignment (Optional) RoleAssignments of the WorkloadIdentity identity AzureIdentity (Optional) Identity of the WorkloadIdentity identityBinding AzureIdentityBinding (Optional) IdentityBinding of the WorkloadIdentity WorkloadIdentitySpec ( Appears on: WorkloadIdentity ) WorkloadIdentitySpec defines the desired state of WorkloadIdentity Field Description name string (Optional) Name of the WorkloadIdentity description string (Optional) Desc of the WorkloadIdentity credentials Credentials (Optional) Credentials to manage the WorkloadIdentity provider Provider Provider of the WorkloadIdentity aws WorkloadIdentityAWS (Optional) AWS WorkloadIdentity azure WorkloadIdentityAzure (Optional) Azure WorkloadIdentity writeToSecretRef WriteToSecretRef (Optional) WriteToSecretRef is a reference to a secret WorkloadIdentityStatus ( Appears on: WorkloadIdentity ) WorkloadIdentityStatus defines the observed state of WorkloadIdentity Field Description ConditionedStatus ConditionedStatus (Members of ConditionedStatus are embedded into this type.) id string (Optional) ID of the Identity name string (Optional) Name of the Identity resources []Resource (Optional) Resources managed by the Identity externalResources []ExternalResource (Optional) External Resources managed bu the Identity WriteToSecretRef ( Appears on: WorkloadIdentitySpec ) WriteToSecretRef is a reference to a secret Field Description name string Name of the secret namespace string (Optional) Namespace of the secret templateData map[string]string TemplateData is a template for the data to be written to the secret Generated with gen-crd-api-reference-docs .","title":"WorkloadIdentity"},{"location":"contributing-coc/","text":"Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"contributing-coc/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"contributing-coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"contributing-coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing-coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"contributing-coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"contributing-coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"contributing-coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"contributing-coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"contributing-coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"contributing-coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"contributing-coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"contributing-coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"contributing-process/","text":"Project Management The Code, our TODOs and Documentation is maintained on GitHub . All Issues should be opened in that repository. Issues Features, bugs and any issues regarding the documentation should be filed as GitHub Issue in our repository. We use labels like kind/feature , kind/bug , area/aws to organize the issues. Issues labeled good first issue and help wanted are especially good for a first contribution. If you want to pick up an issue just leave a comment. Creating a New Issue If you've encountered an issue that is not already reported, please create an issue that contains the following: Clear description of the issue Steps to reproduce it Appropriate labels Building and testing locally The project uses the make build system. It'll run code generators, tests and static code analysis. Building the operator binary and docker image: make build make docker-build IMG = identity-manager:latest Run tests and lint the code: make test make lint Creating a Pull Request Each new pull request should: Reference any related issues Add tests that show the issues have been solved Pass existing tests and linting Contain a clear indication of if they're ready for review or a work in progress Be up to date and/or rebased on the master branch","title":"Contributing Process"},{"location":"contributing-process/#project-management","text":"The Code, our TODOs and Documentation is maintained on GitHub . All Issues should be opened in that repository.","title":"Project Management"},{"location":"contributing-process/#issues","text":"Features, bugs and any issues regarding the documentation should be filed as GitHub Issue in our repository. We use labels like kind/feature , kind/bug , area/aws to organize the issues. Issues labeled good first issue and help wanted are especially good for a first contribution. If you want to pick up an issue just leave a comment.","title":"Issues"},{"location":"contributing-process/#creating-a-new-issue","text":"If you've encountered an issue that is not already reported, please create an issue that contains the following: Clear description of the issue Steps to reproduce it Appropriate labels","title":"Creating a New Issue"},{"location":"contributing-process/#building-and-testing-locally","text":"The project uses the make build system. It'll run code generators, tests and static code analysis. Building the operator binary and docker image: make build make docker-build IMG = identity-manager:latest Run tests and lint the code: make test make lint","title":"Building and testing locally"},{"location":"contributing-process/#creating-a-pull-request","text":"Each new pull request should: Reference any related issues Add tests that show the issues have been solved Pass existing tests and linting Contain a clear indication of if they're ready for review or a work in progress Be up to date and/or rebased on the master branch","title":"Creating a Pull Request"},{"location":"developer-guide/","text":"Developer guide Getting Started You must have a working Go environment and then clone the repo: git clone https://github.com/invisibl-cloud/identity-manager.git cd identity-manager If you want to run controller tests you also need to install kubebuilder's envtest . The recommended way to do so is to install setup-envtest Here is an example on how to set it up: go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest # list available versions setup-envtest list --os $(go env GOOS) --arch $(go env GOARCH) # To use a specific version setup-envtest use -p path 1.20.2 #To set environment variables source <(setup-envtest use 1.20.2 -p env --os $(go env GOOS) --arch $(go env GOARCH)) for more information, please see setup-envtest docs Building & Testing The project uses the make build system. It'll run code generators, tests and static code analysis. Building the operator binary and docker image: make build make docker-build IMG = identity-manager:latest Run tests and lint the code: make test make lint Installing To install the Identity Manager Operator into a Kubernetes Cluster run: helm repo add invisibl https://charts.invisibl.io helm repo update helm install identity-manager invisibl/identity-manager You can alternatively run the controller on your host system for development purposes: make install make run Deploy WorkloadIdentity Create a secret containing your AWS credentials echo -n 'KEYID' > ./access-key echo -n 'SECRETKEY' > ./secret-access-key echo -n 'REGION' > ./region kubectl create secret generic aws-credentials --from-file = ./access-key --from-file = ./secret-access-key --from-file = ./region Apply Workload Identity Save the following workload identity yaml in workload-identity.yaml . apiVersion : identity-manager.io/v1alpha1 kind : WorkloadIdentity metadata : namespace : example name : example spec : name : example description : identity for example workload provider : AWS credentials : source : Secret secretRef : name : aws-credentials namespace : example properties : region : us-east-1 aws : maxSessionDuration : 3600 path : / assumeRolePolicy : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::xxxxxxxxx:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/4EDBDB78CF81F4F9D1CD8B9962E221B1\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"oidc.eks.us-east-1.amazonaws.com/id/4EDBDB78CF81F4F9D1CD8B9962E221B1:sub\": \"system:serviceaccount:example:example\" } } } ] } inlinePolicies : ec2 : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:Describe*\" ], \"Resource\": [ \"*\" ] } ] } pods : - matchLabels : app.kubernetes.io/name : example serviceAccounts : - action : Update name : example namespace : example Once the workload identity is applied, an IAM role will be created in AWS with the policies attached to the role. To remove the CRDs run: make uninstall Documentation We use mkdocs material to generate this documentation. See /docs for the source code. When writing documentation it is advised to run the mkdocs server with live reload: mkdocs serve Open http://localhost:8000 in your browser.","title":"Developer Guide"},{"location":"developer-guide/#developer-guide","text":"","title":"Developer guide"},{"location":"developer-guide/#getting-started","text":"You must have a working Go environment and then clone the repo: git clone https://github.com/invisibl-cloud/identity-manager.git cd identity-manager If you want to run controller tests you also need to install kubebuilder's envtest . The recommended way to do so is to install setup-envtest Here is an example on how to set it up: go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest # list available versions setup-envtest list --os $(go env GOOS) --arch $(go env GOARCH) # To use a specific version setup-envtest use -p path 1.20.2 #To set environment variables source <(setup-envtest use 1.20.2 -p env --os $(go env GOOS) --arch $(go env GOARCH)) for more information, please see setup-envtest docs","title":"Getting Started"},{"location":"developer-guide/#building-testing","text":"The project uses the make build system. It'll run code generators, tests and static code analysis. Building the operator binary and docker image: make build make docker-build IMG = identity-manager:latest Run tests and lint the code: make test make lint","title":"Building &amp; Testing"},{"location":"developer-guide/#installing","text":"To install the Identity Manager Operator into a Kubernetes Cluster run: helm repo add invisibl https://charts.invisibl.io helm repo update helm install identity-manager invisibl/identity-manager You can alternatively run the controller on your host system for development purposes: make install make run","title":"Installing"},{"location":"developer-guide/#deploy-workloadidentity","text":"","title":"Deploy WorkloadIdentity"},{"location":"developer-guide/#create-a-secret-containing-your-aws-credentials","text":"echo -n 'KEYID' > ./access-key echo -n 'SECRETKEY' > ./secret-access-key echo -n 'REGION' > ./region kubectl create secret generic aws-credentials --from-file = ./access-key --from-file = ./secret-access-key --from-file = ./region","title":"Create a secret containing your AWS credentials"},{"location":"developer-guide/#apply-workload-identity","text":"Save the following workload identity yaml in workload-identity.yaml . apiVersion : identity-manager.io/v1alpha1 kind : WorkloadIdentity metadata : namespace : example name : example spec : name : example description : identity for example workload provider : AWS credentials : source : Secret secretRef : name : aws-credentials namespace : example properties : region : us-east-1 aws : maxSessionDuration : 3600 path : / assumeRolePolicy : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::xxxxxxxxx:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/4EDBDB78CF81F4F9D1CD8B9962E221B1\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"oidc.eks.us-east-1.amazonaws.com/id/4EDBDB78CF81F4F9D1CD8B9962E221B1:sub\": \"system:serviceaccount:example:example\" } } } ] } inlinePolicies : ec2 : | { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"ec2:Describe*\" ], \"Resource\": [ \"*\" ] } ] } pods : - matchLabels : app.kubernetes.io/name : example serviceAccounts : - action : Update name : example namespace : example Once the workload identity is applied, an IAM role will be created in AWS with the policies attached to the role. To remove the CRDs run: make uninstall","title":"Apply Workload Identity"},{"location":"developer-guide/#documentation","text":"We use mkdocs material to generate this documentation. See /docs for the source code. When writing documentation it is advised to run the mkdocs server with live reload: mkdocs serve Open http://localhost:8000 in your browser.","title":"Documentation"},{"location":"guides-getting-started/","text":"Getting started This guide helps you to setup the cluster, install Identity Manager, deploy a workload identity and verify the working with a demo application. The following installation steps are applicable for AWS EKS cluster. Note: The minimum supported version of Kubernetes is 1.16.0 . Prerequisites The following tools are needed to be installed in your system: Helm - To install the Identity Manager kubectl - To connect with kubernetes cluster Working with an existing cluster For an existing cluster, a new namespace, a service account and an IAM role need to be created. A few policies that the Identity Manager needs for its working need to be attached to the newly created role. Create the namespace and service account kubectl create namespace identity-manager kubectl create serviceaccount identity-manager -n identity-manager Export the required environment values: export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) export OIDC_PROVIDER = $( aws eks describe-cluster --name <cluster-name> --query \"cluster.identity.oidc.issuer\" --region <region> --output text | sed -e \"s/^https:\\/\\///\" ) export NAMESPACE = identity-manager export SERVICEACCNAME = identity-manager export ROLENAME = identity-manager Save the required IAM polices: read -r -d '' IDENTITY_POLICIES <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"iam:AttachRolePolicy\", \"iam:CreateRole\", \"iam:DeleteRole\", \"iam:DeleteRolePolicy\", \"iam:DetachRolePolicy\", \"iam:GetRole\", \"iam:ListAttachedRolePolicies\", \"iam:ListRolePolicies\", \"iam:PutRolePolicy\", \"iam:UpdateAssumeRolePolicy\", \"iam:UpdateRole\", \"sts:GetCallerIdentity\" ], \"Resource\": \"*\", \"Effect\": \"Allow\" } ] } EOF echo \" ${ IDENTITY_POLICIES } \" > identity-policies.json Save the trust relationship read -r -d '' TRUST_RELATIONSHIP <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::${ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"${OIDC_PROVIDER}:aud\": \"sts.amazonaws.com\", \"${OIDC_PROVIDER}:sub\": \"system:serviceaccount:${NAMESPACE}:${SERVICEACCNAME}\" } } } ] } EOF echo \" ${ TRUST_RELATIONSHIP } \" > trust.json Create the IAM role: aws iam create-role --role-name ${ ROLENAME } --assume-role-policy-document file://trust.json --description \"identity-role\" Note down the IAM role ARN in the response. Attach the IAM policies to the role: aws iam put-role-policy --role-name ${ ROLENAME } --policy-name identity-policy --policy-document file://identity-policies.json Annotate the service account with the IAM role ARN that was noted in the step 5. kubectl annotate serviceaccount -n identity-manager identity-manager \\ eks.amazonaws.com/role-arn = <ROLE ARN> At this point, the setup of the service account identity-manager is finished and is ready for the Identity Manager installation. Installing Identity Manager with Helm Copy the newly created IAM role ARN and create an environment variable: export IAM_ROLE = <IAM role ARN> Install Identity Manager helm repo add invisibl https://charts.invisibl.io helm install my-identity-manager invisibl/identity-manager --set provider.aws.enabled = true --set provider.aws.arn = $IAM_ROLE --set serviceAccount.create = false --set serviceAccount.name = identity-manager --namespace = identity-manager The above command will install Identity Manager in identity-manager namespace and identity-manager service account. This service account is annotated to the IAM role that has the necessary IAM permissions for the Identity Manager. This service account is dedicated to Identity Manager and any workload identity should be deployed in other service accounts. Deploying demo application Get your AWS account ID export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) Get your OIDC provider export OIDC_PROVIDER = $( aws eks describe-cluster --name <cluster name> --query \"cluster.identity.oidc.issuer\" --region <region> --output text | sed -e \"s/^https:\\/\\///\" ) Deploy demo application helm install my-identity-manager-demo invisibl/identity-manager-demo --set serviceAccount.name = sa-demo --namespace = demo --set workloadIdentity.aws.accountId = ${ ACCOUNT_ID } --set workloadIdentity.aws.oidcProvider = ${ OIDC_PROVIDER } --create-namespace The above command will deploy the workload identity and a demo application in the namespace demo . The identity manager will create an IAM role my-identity-manager-demo in AWS with the inline polices mentioned in the workload identity attached to the IAM role. The identity manager will also create a service account sa-demo and will annotate it with the newly created role to facilitate the role binding. Verify the role binding for service account kubectl get serviceaccount sa-demo -n demo -o = jsonpath = '{.metadata.annotations}' The response should look similar to the below one: { \"eks.amazonaws.com/role-arn\" : \"arn:aws:iam::<Account ID>:role/my-identity-manager-demo\" } Check the logs of the demo application pod and it should list your EC2 instances using the new role my-identity-manager-demo . time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS ARN: arn:aws:sts::<Account ID>:assumed-role/my-identity-manager-demo/48520678505362540620424\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"EC2:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0532a81dd8ed78de1\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-078e85384f15b27b9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0ec5be0a1e1017088\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0efee718f18c10742\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0992e8b92ae857ddd\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-097b6eb735190898c\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0f7c4e3a8d62c0af7\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09e2a542b827858de\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0c77422d4e56c42c9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0265da1370d12b44d\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-05d02af34a271e308\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0efa1b0178917b544\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-04027edd12c82f6d6\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0b0d08c57fb60bb71\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09d4114c468def93e\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-09e8cc98f64abef83\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0bc14ad13ef223d76\" time = \"2022-05-04T09:54:04Z\" level = info time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservations count: 8\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instances count: 9\" Uninstalling demo application with Helm helm uninstall my-identity-manager-demo -n demo Uninstalling Identity Manager with Helm helm uninstall my-identity-manager -n identity-manager Troubleshooting Identity Manager maintains the most recent log message in the Status field of the workload identity. In rare cases where the pods are failing to authenticate to the AWS services, the workload identity's Status fields can be queried to view the log which helps in debugging. kubectl get workloadidentity my-identity-manager-demo -n demo -o yaml If there are no error log message found in the Status field of the workload identity, it is worth checking if the namespace and the service account defined in the workload identity matches the trust policy in the aws.assumeRolePolicy . The following is an simple example template of the trust policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"Federated\" : \"arn:aws:iam::454135189203:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E1241A120425308D0853F923A\" }, \"Action\" : \"sts:AssumeRoleWithWebIdentity\" , \"Condition\" : { \"StringEquals\" : { \"oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E1241A120425308D0853F923A:sub\" : \"system:serviceaccount:<namespace>:<service account>\" } } } ] }","title":"Getting started"},{"location":"guides-getting-started/#getting-started","text":"This guide helps you to setup the cluster, install Identity Manager, deploy a workload identity and verify the working with a demo application. The following installation steps are applicable for AWS EKS cluster. Note: The minimum supported version of Kubernetes is 1.16.0 .","title":"Getting started"},{"location":"guides-getting-started/#prerequisites","text":"The following tools are needed to be installed in your system: Helm - To install the Identity Manager kubectl - To connect with kubernetes cluster","title":"Prerequisites"},{"location":"guides-getting-started/#working-with-an-existing-cluster","text":"For an existing cluster, a new namespace, a service account and an IAM role need to be created. A few policies that the Identity Manager needs for its working need to be attached to the newly created role. Create the namespace and service account kubectl create namespace identity-manager kubectl create serviceaccount identity-manager -n identity-manager Export the required environment values: export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) export OIDC_PROVIDER = $( aws eks describe-cluster --name <cluster-name> --query \"cluster.identity.oidc.issuer\" --region <region> --output text | sed -e \"s/^https:\\/\\///\" ) export NAMESPACE = identity-manager export SERVICEACCNAME = identity-manager export ROLENAME = identity-manager Save the required IAM polices: read -r -d '' IDENTITY_POLICIES <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Action\": [ \"iam:AttachRolePolicy\", \"iam:CreateRole\", \"iam:DeleteRole\", \"iam:DeleteRolePolicy\", \"iam:DetachRolePolicy\", \"iam:GetRole\", \"iam:ListAttachedRolePolicies\", \"iam:ListRolePolicies\", \"iam:PutRolePolicy\", \"iam:UpdateAssumeRolePolicy\", \"iam:UpdateRole\", \"sts:GetCallerIdentity\" ], \"Resource\": \"*\", \"Effect\": \"Allow\" } ] } EOF echo \" ${ IDENTITY_POLICIES } \" > identity-policies.json Save the trust relationship read -r -d '' TRUST_RELATIONSHIP <<EOF { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"Federated\": \"arn:aws:iam::${ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}\" }, \"Action\": \"sts:AssumeRoleWithWebIdentity\", \"Condition\": { \"StringEquals\": { \"${OIDC_PROVIDER}:aud\": \"sts.amazonaws.com\", \"${OIDC_PROVIDER}:sub\": \"system:serviceaccount:${NAMESPACE}:${SERVICEACCNAME}\" } } } ] } EOF echo \" ${ TRUST_RELATIONSHIP } \" > trust.json Create the IAM role: aws iam create-role --role-name ${ ROLENAME } --assume-role-policy-document file://trust.json --description \"identity-role\" Note down the IAM role ARN in the response. Attach the IAM policies to the role: aws iam put-role-policy --role-name ${ ROLENAME } --policy-name identity-policy --policy-document file://identity-policies.json Annotate the service account with the IAM role ARN that was noted in the step 5. kubectl annotate serviceaccount -n identity-manager identity-manager \\ eks.amazonaws.com/role-arn = <ROLE ARN> At this point, the setup of the service account identity-manager is finished and is ready for the Identity Manager installation.","title":"Working with an existing cluster"},{"location":"guides-getting-started/#installing-identity-manager-with-helm","text":"Copy the newly created IAM role ARN and create an environment variable: export IAM_ROLE = <IAM role ARN> Install Identity Manager helm repo add invisibl https://charts.invisibl.io helm install my-identity-manager invisibl/identity-manager --set provider.aws.enabled = true --set provider.aws.arn = $IAM_ROLE --set serviceAccount.create = false --set serviceAccount.name = identity-manager --namespace = identity-manager The above command will install Identity Manager in identity-manager namespace and identity-manager service account. This service account is annotated to the IAM role that has the necessary IAM permissions for the Identity Manager. This service account is dedicated to Identity Manager and any workload identity should be deployed in other service accounts.","title":"Installing Identity Manager with Helm"},{"location":"guides-getting-started/#deploying-demo-application","text":"Get your AWS account ID export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) Get your OIDC provider export OIDC_PROVIDER = $( aws eks describe-cluster --name <cluster name> --query \"cluster.identity.oidc.issuer\" --region <region> --output text | sed -e \"s/^https:\\/\\///\" ) Deploy demo application helm install my-identity-manager-demo invisibl/identity-manager-demo --set serviceAccount.name = sa-demo --namespace = demo --set workloadIdentity.aws.accountId = ${ ACCOUNT_ID } --set workloadIdentity.aws.oidcProvider = ${ OIDC_PROVIDER } --create-namespace The above command will deploy the workload identity and a demo application in the namespace demo . The identity manager will create an IAM role my-identity-manager-demo in AWS with the inline polices mentioned in the workload identity attached to the IAM role. The identity manager will also create a service account sa-demo and will annotate it with the newly created role to facilitate the role binding. Verify the role binding for service account kubectl get serviceaccount sa-demo -n demo -o = jsonpath = '{.metadata.annotations}' The response should look similar to the below one: { \"eks.amazonaws.com/role-arn\" : \"arn:aws:iam::<Account ID>:role/my-identity-manager-demo\" } Check the logs of the demo application pod and it should list your EC2 instances using the new role my-identity-manager-demo . time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS ARN: arn:aws:sts::<Account ID>:assumed-role/my-identity-manager-demo/48520678505362540620424\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"EC2:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0532a81dd8ed78de1\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-078e85384f15b27b9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0ec5be0a1e1017088\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0efee718f18c10742\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0992e8b92ae857ddd\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-097b6eb735190898c\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0f7c4e3a8d62c0af7\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09e2a542b827858de\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0c77422d4e56c42c9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0265da1370d12b44d\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-05d02af34a271e308\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0efa1b0178917b544\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-04027edd12c82f6d6\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0b0d08c57fb60bb71\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09d4114c468def93e\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-09e8cc98f64abef83\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0bc14ad13ef223d76\" time = \"2022-05-04T09:54:04Z\" level = info time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservations count: 8\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instances count: 9\"","title":"Deploying demo application"},{"location":"guides-getting-started/#uninstalling-demo-application-with-helm","text":"helm uninstall my-identity-manager-demo -n demo","title":"Uninstalling demo application with Helm"},{"location":"guides-getting-started/#uninstalling-identity-manager-with-helm","text":"helm uninstall my-identity-manager -n identity-manager","title":"Uninstalling Identity Manager with Helm"},{"location":"guides-getting-started/#troubleshooting","text":"Identity Manager maintains the most recent log message in the Status field of the workload identity. In rare cases where the pods are failing to authenticate to the AWS services, the workload identity's Status fields can be queried to view the log which helps in debugging. kubectl get workloadidentity my-identity-manager-demo -n demo -o yaml If there are no error log message found in the Status field of the workload identity, it is worth checking if the namespace and the service account defined in the workload identity matches the trust policy in the aws.assumeRolePolicy . The following is an simple example template of the trust policy: { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Principal\" : { \"Federated\" : \"arn:aws:iam::454135189203:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E1241A120425308D0853F923A\" }, \"Action\" : \"sts:AssumeRoleWithWebIdentity\" , \"Condition\" : { \"StringEquals\" : { \"oidc.eks.us-east-1.amazonaws.com/id/33FC4D52E1241A120425308D0853F923A:sub\" : \"system:serviceaccount:<namespace>:<service account>\" } } } ] }","title":"Troubleshooting"},{"location":"guides-introduction/","text":"Guides The following guides demonstrate use-cases and provide examples of how to use the API. Please pick one of the following guides: Getting started Developer guide","title":"Introduction"},{"location":"guides-introduction/#guides","text":"The following guides demonstrate use-cases and provide examples of how to use the API. Please pick one of the following guides: Getting started Developer guide","title":"Guides"},{"location":"guides-quick-start/","text":"Quick start This guide helps you to setup the cluster, install Identity Manager, deploy a workload identity and verify the working of the Identity Manager with a demo application. The following installation steps are applicable for AWS EKS cluster. Note: If you already have a cluster setup ready, you can refer to the Getting started guide. Prerequisites The following tools are needed to be installed in your system: eksctl - To create a cluster in AWS EKS Helm - To install the Identity Manager kubectl - To connect with kubernetes cluster Create an EKS cluster The following instructions allows you to create a cluster in AWS EKS. They also takes care of creation of a namespace, service account and creation of a role with the IAM policies that are required by the Identity Manager and binds the role to the service account that is to be created. The following eks config file helps you to create a cluster with the required IAM role and policies, an m5.large node in the us-east-1 region. The mentioned policies are the minimum required permissions for Identity Manager. You can change the other config as per your preference. Save the following yaml as eks-identity-manager.yaml . apiVersion : eksctl.io/v1alpha5 kind : ClusterConfig metadata : name : identity-manager-test region : us-east-1 version : '1.21' vpc : subnets : private : us-east-1a : { id : subnet-xxxxxx } us-east-1b : { id : subnet-xxxxxx } clusterEndpoints : publicAccess : true iam : withOIDC : true serviceAccounts : - metadata : name : identity-manager namespace : identity-manager attachPolicy : # inline policy can be defined along with `attachPolicyARNs` Version : \"2012-10-17\" Statement : - Effect : Allow Action : - \"iam:AttachRolePolicy\" - \"iam:CreateRole\" - \"iam:DeleteRole\" - \"iam:DeleteRolePolicy\" - \"iam:DetachRolePolicy\" - \"iam:GetRole\" - \"iam:ListAttachedRolePolicies\" - \"iam:ListRolePolicies\" - \"iam:PutRolePolicy\" - \"iam:UpdateAssumeRolePolicy\" - \"iam:UpdateRole\" - \"sts:GetCallerIdentity\" Resource : '*' managedNodeGroups : - name : identity-test-nodegroup labels : { role : workers } instanceType : m5.large desiredCapacity : 1 volumeSize : 30 privateNetworking : true Create the cluster using eksctl: eksctl create cluster -f eks-identity-manager.yaml This will create an EKS cluster with the specified spec. Installing Identity Manager with Helm Copy the cluster's IAM role: If the cluster is newly created using eksctl , copy the IAM role ARN of the cluster from CloudFormation template. The IAM role can be found in the annotation of the service account identity-manager . export IAM_ROLE = <IAM role> Install Identity Manager helm repo add invisibl https://charts.invisibl.io helm install my-identity-manager invisibl/identity-manager --set provider.aws.enabled = true --set provider.aws.arn = $IAM_ROLE --set serviceAccount.create = false --set serviceAccount.name = identity-manager --namespace = identity-manager The above command will install Identity Manager in identity-manager namespace and identity-manager service account. This service account is annotated to the IAM role that has the necessary IAM permissions for the Identity Manager. This service account is dedicated to Identity Manager and any workload identity should be deployed in another service accounts. Deploying demo application Get your AWS account ID export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) Get your OIDC provider export OIDC_PROVIDER = $( aws eks describe-cluster --name identity-manager-test --query \"cluster.identity.oidc.issuer\" --region us-east-1 --output text | sed -e \"s/^https:\\/\\///\" ) Deploy demo application helm install my-identity-manager-demo invisibl/identity-manager-demo --set serviceAccount.name = sa-demo --namespace = demo --set workloadIdentity.aws.accountId = ${ ACCOUNT_ID } --set workloadIdentity.aws.oidcProvider = ${ OIDC_PROVIDER } --create-namespace The above command will deploy the workload identity and a demo application in the namespace demo . The identity manager will create an IAM role my-identity-manager-demo in AWS with the inline polices mentioned in the workload identity attached to the IAM role. The identity manager will also create a service account sa-demo and will annotate it with the newly created role to facilitate the role binding. Verify the role binding for service account kubectl get serviceaccount sa-demo -n demo -o = jsonpath = '{.metadata.annotations}' The response should look similar to the below one: { \"eks.amazonaws.com/role-arn\" : \"arn:aws:iam::<Account ID>:role/my-identity-manager-demo\" } Check the logs of the demo application pod and it should list your EC2 instances using the new role my-identity-manager-demo . time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS ARN: arn:aws:sts::<Account ID>:assumed-role/my-identity-manager-demo/48520678505362540620424\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"EC2:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0532a81dd8ed78de1\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-078e85384f15b27b9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0ec5be0a1e1017088\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0efee718f18c10742\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0992e8b92ae857ddd\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-097b6eb735190898c\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0f7c4e3a8d62c0af7\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09e2a542b827858de\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0c77422d4e56c42c9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0265da1370d12b44d\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-05d02af34a271e308\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0efa1b0178917b544\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-04027edd12c82f6d6\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0b0d08c57fb60bb71\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09d4114c468def93e\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-09e8cc98f64abef83\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0bc14ad13ef223d76\" time = \"2022-05-04T09:54:04Z\" level = info time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservations count: 8\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instances count: 9\" Uninstalling demo application with Helm helm uninstall my-identity-manager-demo -n demo Uninstalling Identity Manager with Helm helm uninstall my-identity-manager -n identity-manager","title":"Quick start"},{"location":"guides-quick-start/#quick-start","text":"This guide helps you to setup the cluster, install Identity Manager, deploy a workload identity and verify the working of the Identity Manager with a demo application. The following installation steps are applicable for AWS EKS cluster. Note: If you already have a cluster setup ready, you can refer to the Getting started guide.","title":"Quick start"},{"location":"guides-quick-start/#prerequisites","text":"The following tools are needed to be installed in your system: eksctl - To create a cluster in AWS EKS Helm - To install the Identity Manager kubectl - To connect with kubernetes cluster","title":"Prerequisites"},{"location":"guides-quick-start/#create-an-eks-cluster","text":"The following instructions allows you to create a cluster in AWS EKS. They also takes care of creation of a namespace, service account and creation of a role with the IAM policies that are required by the Identity Manager and binds the role to the service account that is to be created. The following eks config file helps you to create a cluster with the required IAM role and policies, an m5.large node in the us-east-1 region. The mentioned policies are the minimum required permissions for Identity Manager. You can change the other config as per your preference. Save the following yaml as eks-identity-manager.yaml . apiVersion : eksctl.io/v1alpha5 kind : ClusterConfig metadata : name : identity-manager-test region : us-east-1 version : '1.21' vpc : subnets : private : us-east-1a : { id : subnet-xxxxxx } us-east-1b : { id : subnet-xxxxxx } clusterEndpoints : publicAccess : true iam : withOIDC : true serviceAccounts : - metadata : name : identity-manager namespace : identity-manager attachPolicy : # inline policy can be defined along with `attachPolicyARNs` Version : \"2012-10-17\" Statement : - Effect : Allow Action : - \"iam:AttachRolePolicy\" - \"iam:CreateRole\" - \"iam:DeleteRole\" - \"iam:DeleteRolePolicy\" - \"iam:DetachRolePolicy\" - \"iam:GetRole\" - \"iam:ListAttachedRolePolicies\" - \"iam:ListRolePolicies\" - \"iam:PutRolePolicy\" - \"iam:UpdateAssumeRolePolicy\" - \"iam:UpdateRole\" - \"sts:GetCallerIdentity\" Resource : '*' managedNodeGroups : - name : identity-test-nodegroup labels : { role : workers } instanceType : m5.large desiredCapacity : 1 volumeSize : 30 privateNetworking : true Create the cluster using eksctl: eksctl create cluster -f eks-identity-manager.yaml This will create an EKS cluster with the specified spec.","title":"Create an EKS cluster"},{"location":"guides-quick-start/#installing-identity-manager-with-helm","text":"Copy the cluster's IAM role: If the cluster is newly created using eksctl , copy the IAM role ARN of the cluster from CloudFormation template. The IAM role can be found in the annotation of the service account identity-manager . export IAM_ROLE = <IAM role> Install Identity Manager helm repo add invisibl https://charts.invisibl.io helm install my-identity-manager invisibl/identity-manager --set provider.aws.enabled = true --set provider.aws.arn = $IAM_ROLE --set serviceAccount.create = false --set serviceAccount.name = identity-manager --namespace = identity-manager The above command will install Identity Manager in identity-manager namespace and identity-manager service account. This service account is annotated to the IAM role that has the necessary IAM permissions for the Identity Manager. This service account is dedicated to Identity Manager and any workload identity should be deployed in another service accounts.","title":"Installing Identity Manager with Helm"},{"location":"guides-quick-start/#deploying-demo-application","text":"Get your AWS account ID export ACCOUNT_ID = $( aws sts get-caller-identity --query \"Account\" --output text ) Get your OIDC provider export OIDC_PROVIDER = $( aws eks describe-cluster --name identity-manager-test --query \"cluster.identity.oidc.issuer\" --region us-east-1 --output text | sed -e \"s/^https:\\/\\///\" ) Deploy demo application helm install my-identity-manager-demo invisibl/identity-manager-demo --set serviceAccount.name = sa-demo --namespace = demo --set workloadIdentity.aws.accountId = ${ ACCOUNT_ID } --set workloadIdentity.aws.oidcProvider = ${ OIDC_PROVIDER } --create-namespace The above command will deploy the workload identity and a demo application in the namespace demo . The identity manager will create an IAM role my-identity-manager-demo in AWS with the inline polices mentioned in the workload identity attached to the IAM role. The identity manager will also create a service account sa-demo and will annotate it with the newly created role to facilitate the role binding. Verify the role binding for service account kubectl get serviceaccount sa-demo -n demo -o = jsonpath = '{.metadata.annotations}' The response should look similar to the below one: { \"eks.amazonaws.com/role-arn\" : \"arn:aws:iam::<Account ID>:role/my-identity-manager-demo\" } Check the logs of the demo application pod and it should list your EC2 instances using the new role my-identity-manager-demo . time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"STS ARN: arn:aws:sts::<Account ID>:assumed-role/my-identity-manager-demo/48520678505362540620424\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"EC2:\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0532a81dd8ed78de1\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-078e85384f15b27b9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0ec5be0a1e1017088\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0efee718f18c10742\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0992e8b92ae857ddd\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-097b6eb735190898c\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0f7c4e3a8d62c0af7\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09e2a542b827858de\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0c77422d4e56c42c9\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0265da1370d12b44d\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-05d02af34a271e308\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0efa1b0178917b544\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-04027edd12c82f6d6\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-0b0d08c57fb60bb71\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-09d4114c468def93e\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservation ID: r-09e8cc98f64abef83\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instance ID: i-0bc14ad13ef223d76\" time = \"2022-05-04T09:54:04Z\" level = info time = \"2022-05-04T09:54:04Z\" level = info msg = \"Reservations count: 8\" time = \"2022-05-04T09:54:04Z\" level = info msg = \"Instances count: 9\"","title":"Deploying demo application"},{"location":"guides-quick-start/#uninstalling-demo-application-with-helm","text":"helm uninstall my-identity-manager-demo -n demo","title":"Uninstalling demo application with Helm"},{"location":"guides-quick-start/#uninstalling-identity-manager-with-helm","text":"helm uninstall my-identity-manager -n identity-manager","title":"Uninstalling Identity Manager with Helm"}]}